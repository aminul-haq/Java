import java.util.*;

class Point implements Comparable<Point> {
  double x, y;
  
  Point() {
  }
  
  Point(double x, double y) {
    this.x = x;
    this.y = y;
  }
  
  Point add(Point p) {
    return new Point(x + p.x, y + p.y);
  }
  
  Point sub(Point p) {
    return new Point(x - p.x, y - p.y);
  }
  
  Point mult(double f) {
    return new Point(x * f, y * f);
  }
  
  Point div(double f) {
    return new Point(x / f, y / f);
  }
  
  double det(Point p) {
    return x * p.y - y * p.x;
  }
  
  double dot(Point p) {
    return x * p.x + y * p.y;
  }
  
  @Override
  public int compareTo(Point o) {
    // TODO Auto-generated method stub
    int c = G.sign(x - o.x);
    if (c != 0)
      return c;
    return G.sign(y - o.y);
  }
  
  @Override
  public String toString() {
    return "(" + x + "," + y + ")";
  }
}

class G {
  static final double EPointS = 1e-8;
  
  static int sign(double s) {
    return s < -EPointS ? -1 : s > EPointS ? 1 : 0;
  }
  
  static double cross(Point p1, Point p2, Point p3) {
    return p2.sub(p1).det(p3.sub(p1));
  }
  
  static int crossOp(Point p1, Point p2, Point p3) {
    return sign(cross(p1, p2, p3));
  }
  
  static Point isSS(Point p1, Point p2, Point q1, Point q2) {
    double a1 = cross(q1, q2, p1), a2 = -cross(q1, q2, p2);
    if (Math.abs(a1 + a2) <= EPointS)
      return null;
    return p1.mult(a2).add(p2.mult(a1)).div(a1 + a2);
  }
  
  static double area(Point[] ps) {
    double ret = 0;
    for (int i = 0; i < ps.length; i++)
      ret += ps[i].det(ps[(i + 1) % ps.length]);
    return Math.abs(ret / 2);
  }
  
  static Point[] convexCut(Point[] ps, Point q1, Point q2) {
    List<Point> qs = new ArrayList<Point>();
    for (int i = 0; i < ps.length; i++) {
      Point p1 = ps[i], p2 = ps[(i + 1) % ps.length];
      int d1 = crossOp(q1, q2, p1), d2 = crossOp(q1, q2, p2);
      if (d1 >= 0)
        qs.add(p1);
      if (d1 * d2 < 0)
        qs.add(isSS(p1, p2, q1, q2));
    }
    return qs.toArray(new Point[0]);
  }
  
  static Point[] convexHull(Point[] ps) {
    if (ps.length <= 1)
      return ps;
    Arrays.sort(ps);
    int n = ps.length;
    Point[] qs = new Point[n * 2];
    int k = 0;
    for (int i = 0; i < n; qs[k++] = ps[i++])
      while (k > 1 && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0)
      --k;
    for (int i = n - 2, t = k; i >= 0; qs[k++] = ps[i--])
      while (k > t && crossOp(qs[k - 2], qs[k - 1], ps[i]) <= 0)
      --k;
    Point[] res = new Point[k - 1];
    System.arraycopy(qs, 0, res, 0, k - 1);
    return res;
  }
}